{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Riana\\\\OneDrive\\\\Desktop\\\\Mini Project\\\\facebook\\\\frontend\\\\src\\\\pages\\\\profile\\\\Cover.js\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport Cropper from \"react-easy-crop\";\nimport useClickOutside from \"../../helpers/clickOutside\";\nimport getCroppedImg from \"../../helpers/getCroppedImg\";\nimport { uploadImages } from \"../../functions/uploadImages\";\nimport { useSelector } from \"react-redux\";\nimport { updateCover } from \"../../functions/user\";\nimport { createPost } from \"../../functions/post\";\nimport PulseLoader from \"react-spinners/PulseLoader\";\nimport OldCovers from \"./OldCovers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Cover(_ref) {\n  _s();\n\n  let {\n    cover,\n    visitor,\n    photos\n  } = _ref;\n  const [showCoverMneu, setShowCoverMenu] = useState(false);\n  const [coverPicture, setCoverPicture] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [show, setShow] = useState(false);\n  const {\n    user\n  } = useSelector(state => ({ ...state\n  }));\n  const menuRef = useRef(null);\n  const refInput = useRef(null);\n  const cRef = useRef(null);\n  useClickOutside(menuRef, () => setShowCoverMenu(false));\n  const [error, setError] = useState(\"\");\n\n  const handleImage = e => {\n    let file = e.target.files[0];\n\n    if (file.type !== \"image/jpeg\" && file.type !== \"image/png\" && file.type !== \"image/webp\" && file.type !== \"image/gif\") {\n      setError(`${file.name} format is not supported.`);\n      setShowCoverMenu(false);\n      return;\n    } else if (file.size > 1024 * 1024 * 5) {\n      setError(`${file.name} is too large max 5mb allowed.`);\n      setShowCoverMenu(false);\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = event => {\n      setCoverPicture(event.target.result);\n    };\n  };\n\n  const [crop, setCrop] = useState({\n    x: 0,\n    y: 0\n  });\n  const [zoom, setZoom] = useState(1);\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n    setCroppedAreaPixels(croppedAreaPixels);\n  }, []);\n  const getCroppedImage = useCallback(async show => {\n    try {\n      const img = await getCroppedImg(coverPicture, croppedAreaPixels);\n\n      if (show) {\n        setZoom(1);\n        setCrop({\n          x: 0,\n          y: 0\n        });\n        setCoverPicture(img);\n      } else {\n        return img;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }, [croppedAreaPixels]);\n  const coverRef = useRef(null);\n  const [width, setWidth] = useState();\n  useEffect(() => {\n    setWidth(coverRef.current.clientWidth);\n  }, [window.innerWidth]);\n\n  const updateCoverPicture = async () => {\n    try {\n      setLoading(true);\n      let img = await getCroppedImage();\n      let blob = await fetch(img).then(b => b.blob());\n      const path = `${user.username}/cover_pictures`;\n      let formData = new FormData();\n      formData.append(\"file\", blob);\n      formData.append(\"path\", path);\n      const res = await uploadImages(formData, path, user.token);\n      const updated_picture = await updateCover(res[0].url, user.token);\n\n      if (updated_picture === \"ok\") {\n        const new_post = await createPost(\"coverPicture\", null, null, res, user.id, user.token);\n\n        if (new_post.status === \"ok\") {\n          setLoading(false);\n          setCoverPicture(\"\");\n          cRef.current.src = res[0].url;\n        } else {\n          setLoading(false);\n          setError(new_post);\n        }\n      } else {\n        setLoading(false);\n        setError(updated_picture);\n      }\n    } catch (error) {\n      setLoading(false);\n      setError(error.response.data.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile_cover\",\n    ref: coverRef,\n    children: [coverPicture && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"save_changes_cover\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"save_changes_left\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"public_icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), \"Your cover photo is public\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"save_changes_right\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"blue_btn opacity_btn\",\n          onClick: () => setCoverPicture(\"\"),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"blue_btn \",\n          onClick: () => updateCoverPicture(),\n          children: loading ? /*#__PURE__*/_jsxDEV(PulseLoader, {\n            color: \"#fff\",\n            size: 5\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 26\n          }, this) : \"Save changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      ref: refInput,\n      hidden: true,\n      accept: \"image/jpeg,image/png,image/webp,image/gif\",\n      onChange: handleImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"postError comment_error cover_error\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"postError_error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"blue_btn\",\n        onClick: () => setError(\"\"),\n        children: \"Try again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this), coverPicture && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cover_crooper\",\n      children: /*#__PURE__*/_jsxDEV(Cropper, {\n        image: coverPicture,\n        crop: crop,\n        zoom: zoom,\n        aspect: width / 350,\n        onCropChange: setCrop,\n        onCropComplete: onCropComplete,\n        onZoomChange: setZoom,\n        showGrid: true,\n        objectFit: \"horizontal-cover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this), cover && !coverPicture && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: cover,\n      className: \"cover\",\n      alt: \"\",\n      ref: cRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this), !visitor && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"udpate_cover_wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"open_cover_update\",\n        onClick: () => setShowCoverMenu(prev => !prev),\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"camera_filled_icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this), \"Add Cover Photo\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this), showCoverMneu && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"open_cover_menu\",\n        ref: menuRef,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"open_cover_menu_item hover1\",\n          onClick: () => setShow(true),\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"photo_icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 17\n          }, this), \"Select Photo\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"open_cover_menu_item hover1\",\n          onClick: () => refInput.current.click(),\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"upload_icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 17\n          }, this), \"Upload Photo\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this), show && /*#__PURE__*/_jsxDEV(OldCovers, {\n      photos: photos,\n      setCoverPicture: setCoverPicture,\n      setShow: setShow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Cover, \"wZfbn1cReWhD/sLsOa3uLh5dA9M=\", false, function () {\n  return [useSelector, useClickOutside];\n});\n\n_c = Cover;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cover\");","map":{"version":3,"sources":["C:/Users/Riana/OneDrive/Desktop/Mini Project/facebook/frontend/src/pages/profile/Cover.js"],"names":["useCallback","useEffect","useRef","useState","Cropper","useClickOutside","getCroppedImg","uploadImages","useSelector","updateCover","createPost","PulseLoader","OldCovers","Cover","cover","visitor","photos","showCoverMneu","setShowCoverMenu","coverPicture","setCoverPicture","loading","setLoading","show","setShow","user","state","menuRef","refInput","cRef","error","setError","handleImage","e","file","target","files","type","name","size","reader","FileReader","readAsDataURL","onload","event","result","crop","setCrop","x","y","zoom","setZoom","croppedAreaPixels","setCroppedAreaPixels","onCropComplete","croppedArea","getCroppedImage","img","console","log","coverRef","width","setWidth","current","clientWidth","window","innerWidth","updateCoverPicture","blob","fetch","then","b","path","username","formData","FormData","append","res","token","updated_picture","url","new_post","id","status","src","response","data","message","prev","click"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport useClickOutside from \"../../helpers/clickOutside\";\r\nimport getCroppedImg from \"../../helpers/getCroppedImg\";\r\nimport { uploadImages } from \"../../functions/uploadImages\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { updateCover } from \"../../functions/user\";\r\nimport { createPost } from \"../../functions/post\";\r\nimport PulseLoader from \"react-spinners/PulseLoader\";\r\nimport OldCovers from \"./OldCovers\";\r\n\r\nexport default function Cover({ cover, visitor, photos }) {\r\n  const [showCoverMneu, setShowCoverMenu] = useState(false);\r\n  const [coverPicture, setCoverPicture] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [show, setShow] = useState(false);\r\n  const { user } = useSelector((state) => ({ ...state }));\r\n  const menuRef = useRef(null);\r\n  const refInput = useRef(null);\r\n  const cRef = useRef(null);\r\n  useClickOutside(menuRef, () => setShowCoverMenu(false));\r\n  const [error, setError] = useState(\"\");\r\n  const handleImage = (e) => {\r\n    let file = e.target.files[0];\r\n    if (\r\n      file.type !== \"image/jpeg\" &&\r\n      file.type !== \"image/png\" &&\r\n      file.type !== \"image/webp\" &&\r\n      file.type !== \"image/gif\"\r\n    ) {\r\n      setError(`${file.name} format is not supported.`);\r\n      setShowCoverMenu(false);\r\n      return;\r\n    } else if (file.size > 1024 * 1024 * 5) {\r\n      setError(`${file.name} is too large max 5mb allowed.`);\r\n      setShowCoverMenu(false);\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = (event) => {\r\n      setCoverPicture(event.target.result);\r\n    };\r\n  };\r\n  const [crop, setCrop] = useState({ x: 0, y: 0 });\r\n  const [zoom, setZoom] = useState(1);\r\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\r\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\r\n    setCroppedAreaPixels(croppedAreaPixels);\r\n  }, []);\r\n  const getCroppedImage = useCallback(\r\n    async (show) => {\r\n      try {\r\n        const img = await getCroppedImg(coverPicture, croppedAreaPixels);\r\n        if (show) {\r\n          setZoom(1);\r\n          setCrop({ x: 0, y: 0 });\r\n          setCoverPicture(img);\r\n        } else {\r\n          return img;\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    },\r\n    [croppedAreaPixels]\r\n  );\r\n  const coverRef = useRef(null);\r\n  const [width, setWidth] = useState();\r\n  useEffect(() => {\r\n    setWidth(coverRef.current.clientWidth);\r\n  }, [window.innerWidth]);\r\n\r\n  const updateCoverPicture = async () => {\r\n    try {\r\n      setLoading(true);\r\n      let img = await getCroppedImage();\r\n      let blob = await fetch(img).then((b) => b.blob());\r\n      const path = `${user.username}/cover_pictures`;\r\n      let formData = new FormData();\r\n      formData.append(\"file\", blob);\r\n      formData.append(\"path\", path);\r\n      const res = await uploadImages(formData, path, user.token);\r\n      const updated_picture = await updateCover(res[0].url, user.token);\r\n      if (updated_picture === \"ok\") {\r\n        const new_post = await createPost(\r\n          \"coverPicture\",\r\n          null,\r\n          null,\r\n          res,\r\n          user.id,\r\n          user.token\r\n        );\r\n        if (new_post.status === \"ok\") {\r\n          setLoading(false);\r\n          setCoverPicture(\"\");\r\n          cRef.current.src = res[0].url;\r\n        } else {\r\n          setLoading(false);\r\n\r\n          setError(new_post);\r\n        }\r\n      } else {\r\n        setLoading(false);\r\n\r\n        setError(updated_picture);\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      setError(error.response.data.message);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"profile_cover\" ref={coverRef}>\r\n      {coverPicture && (\r\n        <div className=\"save_changes_cover\">\r\n          <div className=\"save_changes_left\">\r\n            <i className=\"public_icon\"></i>\r\n            Your cover photo is public\r\n          </div>\r\n          <div className=\"save_changes_right\">\r\n            <button\r\n              className=\"blue_btn opacity_btn\"\r\n              onClick={() => setCoverPicture(\"\")}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button className=\"blue_btn \" onClick={() => updateCoverPicture()}>\r\n              {loading ? <PulseLoader color=\"#fff\" size={5} /> : \"Save changes\"}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <input\r\n        type=\"file\"\r\n        ref={refInput}\r\n        hidden\r\n        accept=\"image/jpeg,image/png,image/webp,image/gif\"\r\n        onChange={handleImage}\r\n      />\r\n      {error && (\r\n        <div className=\"postError comment_error cover_error\">\r\n          <div className=\"postError_error\">{error}</div>\r\n          <button className=\"blue_btn\" onClick={() => setError(\"\")}>\r\n            Try again\r\n          </button>\r\n        </div>\r\n      )}\r\n      {coverPicture && (\r\n        <div className=\"cover_crooper\">\r\n          <Cropper\r\n            image={coverPicture}\r\n            crop={crop}\r\n            zoom={zoom}\r\n            aspect={width / 350}\r\n            onCropChange={setCrop}\r\n            onCropComplete={onCropComplete}\r\n            onZoomChange={setZoom}\r\n            showGrid={true}\r\n            objectFit=\"horizontal-cover\"\r\n          />\r\n        </div>\r\n      )}\r\n      {cover && !coverPicture && (\r\n        <img src={cover} className=\"cover\" alt=\"\" ref={cRef} />\r\n      )}\r\n      {!visitor && (\r\n        <div className=\"udpate_cover_wrapper\">\r\n          <div\r\n            className=\"open_cover_update\"\r\n            onClick={() => setShowCoverMenu((prev) => !prev)}\r\n          >\r\n            <i className=\"camera_filled_icon\"></i>\r\n            Add Cover Photo\r\n          </div>\r\n          {showCoverMneu && (\r\n            <div className=\"open_cover_menu\" ref={menuRef}>\r\n              <div\r\n                className=\"open_cover_menu_item hover1\"\r\n                onClick={() => setShow(true)}\r\n              >\r\n                <i className=\"photo_icon\"></i>\r\n                Select Photo\r\n              </div>\r\n              <div\r\n                className=\"open_cover_menu_item hover1\"\r\n                onClick={() => refInput.current.click()}\r\n              >\r\n                <i className=\"upload_icon\"></i>\r\n                Upload Photo\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n      {show && (\r\n        <OldCovers\r\n          photos={photos}\r\n          setCoverPicture={setCoverPicture}\r\n          setShow={setShow}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}