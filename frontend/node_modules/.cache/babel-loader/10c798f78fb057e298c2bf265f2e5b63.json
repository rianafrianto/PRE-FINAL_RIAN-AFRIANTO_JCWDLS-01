{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Riana\\\\OneDrive\\\\Desktop\\\\Mini Project\\\\fullstack\\\\frontend\\\\src\\\\pages\\\\reset\\\\SearchAccount.js\";\nimport { Form, Formik } from \"formik\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport LoginInput from \"../../components/inputs/loginInput\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SearchAccount(_ref) {\n  let {\n    email,\n    setEmail,\n    error,\n    setError,\n    setLoading,\n    setUserInfos,\n    setVisible\n  } = _ref;\n  const validateEmail = Yup.object({\n    email: Yup.string().required(\"Email address ir required.\").email(\"Must be a valid email address.\").max(50, \"Email address can't be more than 50 characters.\")\n  });\n\n  const handleSearch = async () => {\n    try {\n      setLoading(true);\n      const {\n        data\n      } = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/findUser`, {\n        email\n      });\n      setUserInfos(data);\n      setVisible(1);\n      setError(\"\");\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      setError(error.response.data.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reset_form\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reset_form_header\",\n      children: \"Find Your Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reset_form_text\",\n      children: \"Please enter your email address to search for your account.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      enableReinitialize: true,\n      initialValues: {\n        email\n      },\n      validationSchema: validateEmail,\n      onSubmit: () => {\n        handleSearch();\n      },\n      children: formik => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(LoginInput, {\n          type: \"text\",\n          name: \"email\",\n          onChange: e => setEmail(e.target.value),\n          placeholder: \"Email address or phone number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error_text\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reset_form_btns\",\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"/login\",\n            className: \"gray_btn\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"blue_btn\",\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_c = SearchAccount;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchAccount\");","map":{"version":3,"sources":["C:/Users/Riana/OneDrive/Desktop/Mini Project/fullstack/frontend/src/pages/reset/SearchAccount.js"],"names":["Form","Formik","useState","Link","LoginInput","Yup","axios","SearchAccount","email","setEmail","error","setError","setLoading","setUserInfos","setVisible","validateEmail","object","string","required","max","handleSearch","data","post","process","env","REACT_APP_BACKEND_URL","response","message","formik","e","target","value"],"mappings":";AAAA,SAASA,IAAT,EAAeC,MAAf,QAA6B,QAA7B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,eAAe,SAASC,aAAT,OAQZ;AAAA,MARmC;AACpCC,IAAAA,KADoC;AAEpCC,IAAAA,QAFoC;AAGpCC,IAAAA,KAHoC;AAIpCC,IAAAA,QAJoC;AAKpCC,IAAAA,UALoC;AAMpCC,IAAAA,YANoC;AAOpCC,IAAAA;AAPoC,GAQnC;AACD,QAAMC,aAAa,GAAGV,GAAG,CAACW,MAAJ,CAAW;AAC/BR,IAAAA,KAAK,EAAEH,GAAG,CAACY,MAAJ,GACJC,QADI,CACK,4BADL,EAEJV,KAFI,CAEE,gCAFF,EAGJW,GAHI,CAGA,EAHA,EAGI,iDAHJ;AADwB,GAAX,CAAtB;;AAMA,QAAMC,YAAY,GAAG,YAAY;AAC/B,QAAI;AACFR,MAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,YAAM;AAAES,QAAAA;AAAF,UAAW,MAAMf,KAAK,CAACgB,IAAN,CACpB,GAAEC,OAAO,CAACC,GAAR,CAAYC,qBAAsB,WADhB,EAErB;AAAEjB,QAAAA;AAAF,OAFqB,CAAvB;AAIAK,MAAAA,YAAY,CAACQ,IAAD,CAAZ;AACAP,MAAAA,UAAU,CAAC,CAAD,CAAV;AACAH,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAC,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAXD,CAWE,OAAOF,KAAP,EAAc;AACdE,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAD,MAAAA,QAAQ,CAACD,KAAK,CAACgB,QAAN,CAAeL,IAAf,CAAoBM,OAArB,CAAR;AACD;AACF,GAhBD;;AAiBA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE,QAAC,MAAD;AACE,MAAA,kBAAkB,MADpB;AAEE,MAAA,aAAa,EAAE;AACbnB,QAAAA;AADa,OAFjB;AAKE,MAAA,gBAAgB,EAAEO,aALpB;AAME,MAAA,QAAQ,EAAE,MAAM;AACdK,QAAAA,YAAY;AACb,OARH;AAAA,gBAUIQ,MAAD,iBACC,QAAC,IAAD;AAAA,gCACE,QAAC,UAAD;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,IAAI,EAAC,OAFP;AAGE,UAAA,QAAQ,EAAGC,CAAD,IAAOpB,QAAQ,CAACoB,CAAC,CAACC,MAAF,CAASC,KAAV,CAH3B;AAIE,UAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,gBADF,EAOGrB,KAAK,iBAAI;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,oBAA6BA;AAA7B;AAAA;AAAA;AAAA;AAAA,gBAPZ,eAQE;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAA,kCACE,QAAC,IAAD;AAAM,YAAA,EAAE,EAAC,QAAT;AAAkB,YAAA,SAAS,EAAC,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,SAAS,EAAC,UAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAXJ;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsCD;KAtEuBH,a","sourcesContent":["import { Form, Formik } from \"formik\";\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport LoginInput from \"../../components/inputs/loginInput\";\r\nimport * as Yup from \"yup\";\r\nimport axios from \"axios\";\r\n\r\nexport default function SearchAccount({\r\n  email,\r\n  setEmail,\r\n  error,\r\n  setError,\r\n  setLoading,\r\n  setUserInfos,\r\n  setVisible,\r\n}) {\r\n  const validateEmail = Yup.object({\r\n    email: Yup.string()\r\n      .required(\"Email address ir required.\")\r\n      .email(\"Must be a valid email address.\")\r\n      .max(50, \"Email address can't be more than 50 characters.\"),\r\n  });\r\n  const handleSearch = async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.post(\r\n        `${process.env.REACT_APP_BACKEND_URL}/findUser`,\r\n        { email }\r\n      );\r\n      setUserInfos(data);\r\n      setVisible(1);\r\n      setError(\"\");\r\n      setLoading(false);\r\n    } catch (error) {\r\n      setLoading(false);\r\n      setError(error.response.data.message);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"reset_form\">\r\n      <div className=\"reset_form_header\">Find Your Account</div>\r\n      <div className=\"reset_form_text\">\r\n        Please enter your email address to search for your account.\r\n      </div>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues={{\r\n          email,\r\n        }}\r\n        validationSchema={validateEmail}\r\n        onSubmit={() => {\r\n          handleSearch();\r\n        }}\r\n      >\r\n        {(formik) => (\r\n          <Form>\r\n            <LoginInput\r\n              type=\"text\"\r\n              name=\"email\"\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              placeholder=\"Email address or phone number\"\r\n            />\r\n            {error && <div className=\"error_text\">{error}</div>}\r\n            <div className=\"reset_form_btns\">\r\n              <Link to=\"/login\" className=\"gray_btn\">\r\n                Cancel\r\n              </Link>\r\n              <button type=\"submit\" className=\"blue_btn\">\r\n                Search\r\n              </button>\r\n            </div>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}